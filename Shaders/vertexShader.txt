#version 330 core

layout(location = 0) in vec3 vertpos;
layout(location = 1) in vec2 vertuv;
layout(location = 2) in vec3 vertnorm;
layout(location = 3) in vec3 verttang;
layout(location = 4) in vec3 verttang2;

out vec2 uv;
out vec3 pos;
out vec3 norm;
out vec3 eye;
out vec3 light_dir;
out vec3 light_dir_tang;
out vec3 eye_tang;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;
uniform vec3 light_pos;

void main(){
	mat3 modelview = mat3(model * view);
	gl_Position = proj * view * model * vec4(vertpos, 1);

	pos = (model * vec4(vertpos, 1)).xyz;

	vec3 vertpos2 = (view * model * vec4(vertpos, 1)).xyz;
	eye = vec3(0, 0, 0) - vertpos2;

	vec3 l2 = (view * vec4(light_pos, 1)).xyz;
	light_dir = l2 + eye;

	norm = (view * model * vec4(vertnorm, 0)).xyz;
	uv = vertuv;

	mat3 movelview_t = transpose(mat3(
		modelview * verttang,
		modelview * verttang2,
		modelview * vertnorm
	));

	light_dir_tang = movelview_t * light_dir;
	eye_tang =  movelview_t * eye;
}
